# Problem: Martian Robots

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

## Instructions

This is an Elixir Livebook. You'll need to install Livebook; see <https://livebook.dev/>. When you run Livebook, a web browser will appear. Navigate to, and open, this file.

To evaluate the notebook press `Esc` (enter navigation mode), `e` (evaluate), `a` (all outdated). You'll need to do this at least once to get the input textareas to appear.

For help, press `Esc`, `?`.

## The Problem

The surface of Mars can be modelled by a rectangular grid around which robots are able to
move according to instructions provided from Earth. You are to write a program that
determines each sequence of robot positions and reports the final position of the robot.

A robot position consists of a grid coordinate (a pair of integers: x-coordinate followed by
y-coordinate) and an orientation (N, S, E, W for north, south, east, and west).

A robot instruction is a string of the letters “L”, “R”, and “F” which represent, respectively, the instructions:

* Left : the robot turns left 90 degrees and remains on the current grid point.
* Right : the robot turns right 90 degrees and remains on the current grid point.
* Forward : the robot moves forward one grid point in the direction of the current
  orientation and maintains the same orientation.

The direction North corresponds to the direction from grid point (x, y) to grid point (x, y+1).

There is also a possibility that additional command types may be required in the future and
provision should be made for this.

Since the grid is rectangular and bounded (...yes Mars is a strange planet), a robot that
moves “off” an edge of the grid is lost forever. However, lost robots leave a robot “scent” that
prohibits future robots from dropping off the world at the same grid point. The scent is left at
the last grid position the robot occupied before disappearing over the edge. An instruction to
move “off” the world from a grid point from which a robot has been previously lost is simply
ignored by the current robot.

## The Input

The first line of input is the upper-right coordinates of the rectangular world, the lower-left
coordinates are assumed to be 0, 0.

The remaining input consists of a sequence of robot positions and instructions (two lines per
robot). A position consists of two integers specifying the initial coordinates of the robot and
an orientation (N, S, E, W), all separated by whitespace on one line. A robot instruction is a
string of the letters “L”, “R”, and “F” on one line.

Each robot is processed sequentially, i.e., finishes executing the robot instructions before the
next robot begins execution.

The maximum value for any coordinate is 50.

All instruction strings will be less than 100 characters in length.

## The Output

For each robot position/instruction in the input, the output should indicate the final grid
position and orientation of the robot. If a robot falls off the edge of the grid the word “LOST”
should be printed after the position and orientation.

## Parsing the input

```elixir
input = Kino.Input.textarea("Problem Input:")
```

```elixir
# Read the problem input, split on line breaks; discard empty lines
# (the spec implies that they're not supposed to be there, but the PDF has them).
input =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)

# Break at the first line.
[range | robots] = input
```

## Define the grid

We'll use a module, `Grid`, to give us some more type-safety.

```elixir
defmodule Grid do
  defstruct [:max_x, :max_y, :marks]

  def new([max_x, max_y]), do: new(max_x, max_y)
  def new(max_x, max_y), do: %__MODULE__{max_x: max_x, max_y: max_y, marks: MapSet.new()}

  def mark(grid = %__MODULE__{marks: marks}, x, y) do
    %{grid | marks: MapSet.put(marks, {x, y})}
  end

  def is_marked(%__MODULE__{marks: marks}, x, y) do
    MapSet.member?(marks, {x, y})
  end
end
```

```elixir
# Convert the range.
grid =
  String.split(range)
  |> Enum.map(&String.to_integer/1)
  |> Grid.new()
```

## Define the Robot module

A `Robot` consists of coordinates, a direction, and a list of instructions:

```elixir
defmodule Robot do
  defstruct [:x, :y, :facing, :lost, :instructions]

  def new(x, y, facing, instructions)
      when is_integer(x) and
             is_integer(y) and
             is_atom(facing) and
             is_list(instructions) do
    %__MODULE__{x: x, y: y, facing: facing, lost: false, instructions: instructions}
  end
end
```

```elixir
defmodule Parser do
  def parse_robot([init, instructions]) do
    [x, y, facing] = String.split(init)
    x = String.to_integer(x)
    y = String.to_integer(y)

    facing =
      case facing do
        "N" -> :north
        "E" -> :east
        "S" -> :south
        "W" -> :west
      end

    instructions = Parser.parse_instructions(instructions)
    Robot.new(x, y, facing, instructions)
  end

  def parse_instructions(instructions) do
    String.to_charlist(instructions)
    |> Enum.map(fn
      ?R -> :right
      ?L -> :left
      ?F -> :forward
    end)
  end
end
```

```elixir
# Parse the robots.
robots =
  Enum.chunk_every(robots, 2)
  |> Enum.map(&Parser.parse_robot/1)
```

## Introduce a Runner

```elixir
defmodule Runner do
  def run(robot = %Robot{instructions: instructions}, grid) do
    {robot, _grid} =
      Enum.reduce(instructions, {robot, grid}, fn instruction, {robot, grid} ->
        next(instruction, robot, grid)
      end)

    robot
  end

  def next(_, robot = %Robot{lost: true}, grid), do: {robot, grid}

  def next(:right, robot = %Robot{facing: facing}, grid),
    do: {%{robot | facing: right(facing)}, grid}

  def next(:left, robot = %Robot{facing: facing}, grid),
    do: {%{robot | facing: left(facing)}, grid}

  def next(:forward, robot = %Robot{facing: :north, y: y}, grid) when y < grid.max_y,
    do: {%{robot | y: y + 1}, grid}

  def next(:forward, robot = %Robot{facing: :east, x: x}, grid) when x < grid.max_x,
    do: {%{robot | x: x + 1}, grid}

  def next(:forward, robot = %Robot{facing: :south, y: y}, grid) when y > 0,
    do: {%{robot | y: y - 1}, grid}

  def next(:forward, robot = %Robot{facing: :west, x: x}, grid) when x > 0,
    do: {%{robot | x: x - 1}, grid}

  def next(:forward, robot = %Robot{x: x, y: y}, grid) do
    if Grid.is_marked(grid, x, y) do
      # Ignore the instruction to go forward.
      {robot, grid}
    else
      {%{robot | lost: true}, grid}
    end
  end

  defp left(:north), do: :west
  defp left(:east), do: :north
  defp left(:south), do: :east
  defp left(:west), do: :south

  defp right(:north), do: :east
  defp right(:east), do: :south
  defp right(:south), do: :west
  defp right(:west), do: :north
end
```

```elixir
format_direction = fn
  :north -> "N"
  :east -> "E"
  :south -> "S"
  :west -> "W"
end

format_lost = fn
  true -> "LOST"
  _ -> ""
end

format_robot = fn robot ->
  "#{robot.x} #{robot.y} #{format_direction.(robot.facing)} #{format_lost.(robot.lost)}"
end
```

## Unit Tests

```elixir
ExUnit.configure(exclude: [:skip])
ExUnit.start(autorun: false)
```

```elixir
defmodule SimpleRobotTest do
  use ExUnit.Case

  test "A robot which keeps turning right stays in the same place" do
    grid = Grid.new(1, 1)
    robot = Robot.new(0, 0, :north, [:right, :right, :right])
    robot = Runner.run(robot, grid)
    assert robot.x == 0
    assert robot.y == 0
    assert robot.facing == :west
    refute robot.lost
  end

  test "A robot which walks north off the map should have the correct last position" do
    grid = Grid.new(1, 1)
    robot = Robot.new(0, 0, :north, [:forward, :forward])
    robot = Runner.run(robot, grid)
    assert robot.x == 0
    assert robot.y == 1
    assert robot.lost
  end

  test "A robot which walks east off the map should have the correct last position" do
    grid = Grid.new(1, 1)
    robot = Robot.new(0, 0, :east, [:forward, :forward])
    robot = Runner.run(robot, grid)
    assert robot.x == 1
    assert robot.y == 0
    assert robot.lost
  end
end

ExUnit.run()
```

```elixir
defmodule SampleInputTest do
  use ExUnit.Case

  test "Sample Input: Robot 1" do
    grid = Grid.new(5, 3)
    robot = Robot.new(1, 1, :east, Parser.parse_instructions("RFRFRFRF"))
    robot = Runner.run(robot, grid)
    assert robot.x == 1
    assert robot.y == 1
    assert robot.facing == :east
    refute robot.lost
  end

  describe "For whatever reason, my robot is in the wrong place, so let's drill down a bit" do
    test "Sample Input: Robot 2, part 1" do
      grid = Grid.new(5, 3)
      # FRRF should put the robot back where it was, but facing the other way.
      robot = Robot.new(3, 2, :north, Parser.parse_instructions("FRRF"))
      robot = Runner.run(robot, grid)
      assert robot.x == 3
      assert robot.y == 2
      assert robot.facing == :south
      refute robot.lost
    end

    test "Sample Input: Robot 2, part 2" do
      grid = Grid.new(5, 3)
      # FRRF did put the robot back where it was, but facing the other way.
      # LLF should put the robot at the north edge of the grid.
      robot = Robot.new(3, 2, :south, Parser.parse_instructions("LLF"))
      robot = Runner.run(robot, grid)
      assert robot.x == 3
      assert robot.y == 3
      assert robot.facing == :north
      refute robot.lost
    end

    test "Sample Input: Robot 2, part 3" do
      grid = Grid.new(5, 3)
      # ...another F should put the robot over the edge of the grid
      robot = Robot.new(3, 3, :north, Parser.parse_instructions("F"))
      robot = Runner.run(robot, grid)
      assert robot.x == 3
      assert robot.y == 3
      assert robot.facing == :north
      assert robot.lost

      # ...and further instructions should be ignored
      {robot, _} = Runner.next(:right, robot, grid)
      {robot, _} = Runner.next(:right, robot, grid)
      {robot, _} = Runner.next(:forward, robot, grid)
      assert robot.x == 3
      assert robot.y == 3
      assert robot.facing == :north
      assert robot.lost
    end
  end

  test "Sample Input: Robot 2" do
    grid = Grid.new(5, 3)
    robot = Robot.new(3, 2, :north, Parser.parse_instructions("FRRFLLFFRRFLL"))
    robot = Runner.run(robot, grid)
    assert robot.x == 3
    assert robot.y == 3
    assert robot.facing == :north
    assert robot.lost

    # TODO, but needs tuple return from Runner.run:
    # assert Grid.is_marked(grid, 3, 3)
  end

  test "Sample Input: Robot 3" do
    grid = Grid.new(5, 3) |> Grid.mark(3, 3)
    robot = Robot.new(0, 3, :west, Parser.parse_instructions("LLFFF"))
    robot = Runner.run(robot, grid)
    assert robot.x == 3
    assert robot.y == 3
    assert robot.facing == :east
    refute robot.lost

    {robot, _} = Runner.next(:left, robot, grid)
    assert robot.facing == :north

    # Ignore the forward instruction.
    {robot, _} = Runner.next(:forward, robot, grid)
    assert robot.x == 3
    assert robot.y == 3
    refute robot.lost

    # Turn left.
    {robot, _} = Runner.next(:left, robot, grid)
    assert robot.facing == :west

    # It should now be safe to move.
    {robot, _} = Runner.next(:forward, robot, grid)
    assert robot.x == 2

    {robot, _} = Runner.next(:left, robot, grid)
    assert robot.facing == :south
    assert robot.x == 2
    assert robot.y == 3
    refute robot.lost
  end
end

ExUnit.run()
```

```elixir
defmodule ScentTest do
  use ExUnit.Case

  test "Robots should not move off the world if they're on scent" do
    grid = Grid.new(1, 1) |> Grid.mark(1, 1)
    robot = Robot.new(1, 1, :north, [:forward])
    robot = Runner.run(robot, grid)
    assert robot.x == 1
    assert robot.y == 1
    refute robot.lost
  end

  test "Robots can move forward on scented squares if it wouldn't kill them" do
    grid = Grid.new(1, 1) |> Grid.mark(1, 1)
    robot = Robot.new(1, 1, :west, [:forward])
    robot = Runner.run(robot, grid)
    assert robot.x == 0
    assert robot.y == 1
    refute robot.lost
  end
end

ExUnit.run()
```

## Run the instructions

```elixir
for robot <- robots do
  robot = Runner.run(robot, grid)
  IO.puts(format_robot.(robot))
  robot
end

:ok
```
